if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

list.of.packages <- c('DESeq2','openxlsx','BiocGenerics','tximport','ggplot2','biomaRt','S4Vectors','apeglm','tidyverse')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) BiocManager::install(new.packages)

lapply(list.of.packages, require, character.only = TRUE)

library(BiocFileCache)
library(dbplyr)

ensembl_ms_mart <- useMart(biomart="ensembl", dataset="mmusculus_gene_ensembl")
ensembl_df <- getBM(attributes = c("ensembl_transcript_id_version", "ensembl_gene_id_version", "external_gene_name"), mart = ensembl_ms_mart) %>%
  as_tibble() %>%
  mutate(noVersion = sub('\\..*', '', ensembl_transcript_id_version))

library(dplyr)
tx2gene <- ensembl_df %>%
  dplyr::select(noVersion, external_gene_name) %>%
  rename(c('Transcript' = "noVersion" , "Gene" = "external_gene_name" )) %>%
  data.frame()

metadata <- read.csv("metadata.csv")
sample_data <- data.frame(position = metadata$Well, condition = metadata$Sample.ID_2,
                          celltype = metadata$CellType)

sample_subset <- subset(sample_data, condition %in% c('control', 'treatment')
                        & celltype %in% c("target_celltype"))

all_files <- list.files("quant", full.names = T, pattern=NULL, all.files=FALSE)
quant_files <- file.path(all_files, "quant.sf")

file_prefix = 'analysis_results'
prefix <- sample_subset

position_list <- paste0(prefix$position)
sample_files <- file.path("quant", position_list, "quant.sf")

all(file.exists(quant_files))

txi<-tximport(files=sample_files,type="salmon", tx2gene = tx2gene, ignoreTxVersion = T)

txicounts<-as.matrix(txi$counts)

count_data <- txi$counts %>%
  round() %>%
  data.frame()
rm(txicounts)

dds <- DESeqDataSetFromTximport(txi, colData = prefix, design = ~ condition)

dds <- estimateSizeFactors(dds)
idx <- rowMeans(counts(dds, normalized = TRUE)) >= 5
dds <- dds[idx,]

dds_run <- DESeq(dds, betaPrior = F)

resultsNames(dds_run)

dds_result <- results(dds_run, contrast = c('condition', 'control', 'treatment'), independentFiltering = T, pAdjustMethod = 'BH')
dds_result <- lfcShrink(dds_run, contrast = c('condition', 'control', 'treatment'), res = dds_result, type = 'normal')

all_stats <- dds_result %>%
  data.frame() %>%
  rownames_to_column(var='gene') %>%
  as_tibble
write.xlsx(all_stats, file = paste0('results/', file_prefix, '_all_gene_statistics.xlsx'), overwrite = T)

summary(dds_result, alpha = 0.05)

dds_run <- estimateSizeFactors(dds_run)
DS_norm_counts <- counts(dds_run, normalized = TRUE)

plotDispEsts(dds_run)

rld <- vst(dds_run, blind=TRUE)

plotPCA(rld, intgroup=c('condition'))

z <- plotPCA(rld, intgroup=c('condition'))
PCA <- z + geom_label(aes(label = prefix$position))
PCA
ggsave(paste0("plots/", file_prefix, "_PCA.pdf"), device = "pdf", 
       width = 12, height = 15, units = "in", dpi = 600, plot = PCA)

sig_res <- dds_result %>%
  data.frame() %>%
  rownames_to_column(var='gene') %>%
  as_tibble %>%
  filter(padj < 0.10) %>%
  arrange(padj)
sorted_DEGenes <- sig_res$gene

name_list <- c('gene', (paste0(dds_run$condition,"_",dds_run$position)))

all_stats <- dds_result %>%
  data.frame() %>%
  rownames_to_column(var='gene') %>%
  as_tibble

sig_export <- DS_norm_counts %>%
  data.frame() %>%
  rownames_to_column(var = 'gene_name') %>%
  as_tibble() %>%
  `colnames<-`(name_list) %>%
  semi_join(sig_res) %>%
  slice(match(sorted_DEGenes, gene))

write.xlsx(sig_export, file = paste0('results/', file_prefix, '_DEGene_counts_pval05.xlsx'), overwrite = T)

unwanted_genes = paste(c('^Gm', '^mt-', '^Vmn', '^Rpl', '^Rps', '^Olfr'), collapse = '|')

rownames <- sig_export$gene
sig_export[,1] <- NULL
rownames(sig_export) <- rownames
check_cols <- c('gene', colnames(sig_export))

check_counts <- DS_norm_counts %>%
  as.data.frame() %>%
  rownames_to_column('gene')%>% 
  as_tibble %>%
  `colnames<-`(check_cols)

check_res <- dds_result %>%
  as.data.frame() %>%
  rownames_to_column('gene') %>%
  filter(!str_detect(gene, unwanted_genes))

my_genes <- rownames(txi$abundance)
my_genes_ann <- ensembl_df[match(my_genes,ensembl_df$external_gene_name),]
test_TPM <- cbind(my_genes_ann$external_gene_name,txi$abundance) %>%
  as.data.frame() %>% 
  as_tibble() %>%
  `colnames<-`(check_cols)

data_final <- subset(check_counts, gene %in% sig_res$gene)

write.xlsx(check_res, file = paste0('results/', file_prefix, '_statistics.xlsx'), overwrite = T)
write.xlsx(check_counts, file = paste0('results/', file_prefix, '_DS_counts.xlsx'), overwrite = T)
write.xlsx(data_final, file = paste0('results/', file_prefix, '_DEGene_counts.xlsx'), rowNames = T, overwrite = T)
write.xlsx(sig_res, file = paste0('results/', file_prefix, '_DEGene_statistics.xlsx'), overwrite = T)
write.xlsx(test_TPM, file = paste0('results/', file_prefix, '_TPM.xlsx'), overwrite = T)
